%%%%%
%%%%%  Emery Berger's publications.
%%%%%

@article{DBLP:journals/corr/LiuCB16,
  author    = {Tongping Liu and
               Charlie Curtsinger and
               Emery D. Berger},
  title     = {\textsc{DoubleTake}: Fast and Precise Error Detection via Evidence-Based Dynamic
               Analysis},
  journal   = {CoRR},
  volume    = {abs/1601.07962},
  year      = {2016},
  url       = {http://arxiv.org/abs/1601.07962},
  timestamp = {Mon, 01 Feb 2016 15:36:05 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/journals/corr/LiuCB16},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{DBLP:conf/sosp/CurtsingerB15,
  author    = {Charlie Curtsinger and
               Emery D. Berger},
  title     = {\textsc{Coz}: finding code that counts with causal profiling},
  booktitle = {Proceedings of the 25th Symposium on Operating Systems Principles,
               {SOSP} 2015, Monterey, CA, USA, October 4-7, 2015},
  pages     = {184--197},
  year      = {2015},
  crossref  = {DBLP:conf/sosp/2015},
  url       = {http://doi.acm.org/10.1145/2815400.2815409},
  doi       = {10.1145/2815400.2815409},
  timestamp = {Fri, 02 Oct 2015 08:59:57 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/sosp/CurtsingerB15},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}
@proceedings{DBLP:conf/sosp/2015,
  editor    = {Ethan L. Miller and
               Steven Hand},
  title     = {Proceedings of the 25th Symposium on Operating Systems Principles,
               {SOSP} 2015, Monterey, CA, USA, October 4-7, 2015},
  publisher = {{ACM}},
  year      = {2015},
  url       = {http://dl.acm.org/citation.cfm?id=2815400},
  isbn      = {978-1-4503-3834-9},
  timestamp = {Fri, 02 Oct 2015 08:56:57 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/sosp/2015},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}


@inproceedings{DBLP:conf/oopsla/BarowyGB14,
  author    = {Daniel W. Barowy and
               Dimitar Gochev and
               Emery D. Berger},
  title     = {\textsc{CheckCell}: data debugging for spreadsheets},
  booktitle = {Proceedings of the 2014 {ACM} International Conference on Object Oriented
               Programming Systems Languages {\&} Applications, {OOPSLA} 2014,
               part of {SPLASH} 2014, Portland, OR, USA, October 20-24, 2014},
  year      = {2014},
  pages     = {507--523},
  crossref  = {DBLP:conf/oopsla/2014},
  url       = {http://doi.acm.org/10.1145/2660193.2660207},
  doi       = {10.1145/2660193.2660207},
  timestamp = {Wed, 05 Nov 2014 00:09:44 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/oopsla/BarowyGB14},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}


@inproceedings{DBLP:conf/oopsla/ToschB14,
  author    = {Emma Tosch and
               Emery D. Berger},
  title     = {\textsc{SurveyMan}: programming and automatically debugging surveys},
  booktitle = {Proceedings of the 2014 {ACM} International Conference on Object Oriented
               Programming Systems Languages {\&} Applications, {OOPSLA} 2014,
               part of {SPLASH} 2014, Portland, OR, USA, October 20-24, 2014},
  year      = {2014},
  pages     = {197--211},
  crossref  = {DBLP:conf/oopsla/2014},
  url       = {http://doi.acm.org/10.1145/2660193.2660206},
  doi       = {10.1145/2660193.2660206},
  timestamp = {Wed, 05 Nov 2014 00:09:11 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/oopsla/ToschB14},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}
@proceedings{DBLP:conf/oopsla/2014,
  editor    = {Andrew P. Black and
               Todd D. Millstein},
  title     = {Proceedings of the 2014 {ACM} International Conference on Object Oriented
               Programming Systems Languages {\&} Applications, {OOPSLA} 2014,
               part of {SPLASH} 2014, Portland, OR, USA, October 20-24, 2014},
  year      = {2014},
  publisher = {{ACM}},
  url       = {http://dl.acm.org/citation.cfm?id=2660193},
  isbn      = {978-1-4503-2585-1},
  timestamp = {Wed, 05 Nov 2014 00:09:11 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/oopsla/2014},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{predator:ppopp14,
  author = {Tongping Liu and Chen Tian and Ziang Hu and Emery D. Berger},
  title = {{\sc Predator}: Predictive False Sharing Detection},
  booktitle = {Proceedings of the 19th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming},
  location = {Orlando, Florida, USA},
  publisher = {ACM},
  address = {New York, NY, USA},
  year = {2014}
}

@inproceedings{doppio:pldi14,
  author = {John Vilk and Emery D. Berger},
  title = {{\sc Doppio}: Breaking the Browser Language Barrier},
  booktitle = {Proceedings of the 2014 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI 2014)},
  location = {Edinburgh, Scotland, UK},
  publisher = {ACM},
  pages={508--518},
  year={2014},
}


@article{proartis2013,
  title = {{PROARTIS}: Probabilistically Analysable Real-Time Systems},
  author = {Francisco J. Cazorla and Eduardo Quinones and Tullio Vardanega and Liliana Cucu and Benoit Triquet and Guillem Bernat and Emery Berger and Jaume Abella and Franck Wartel and Michael Houston and Luca Santinelli and Leonidas Kosmidis and Code Lo and Dorin Maxim},
 journal = {ACM Transactions on Embedded Computing Systems (TECS)},
 abbr = {ACM Trans. Embed. Comput. Syst.},
 issn = {1539-9087},
 publisher = {ACM},
 year = 2013,
 address = {New York, NY, USA},
}

@inproceedings{stabilizer:asplos13,
 author = {Charlie Curtsinger and Emery D. Berger},
 title = {{\sc Stabilizer}: Statistically Sound Performance Evaluation},
 booktitle = {Proceedings of the seventeenth international conference on Architectural Support for Programming Languages and Operating Systems},
 series = {ASPLOS '13},
 year = {2013},
 location = {Houston, Texas, USA},
 numpages = {12},
 acmid = {2151002},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@inproceedings{Barowy:2012:API:2384616.2384663,
 author = {Barowy, Daniel W. and Curtsinger, Charlie and Berger, Emery D. and McGregor, Andrew},
 title = {{\sc AutoMan}: a platform for integrating human-based and digital computation},
 booktitle = {Proceedings of the ACM international conference on Object oriented programming systems languages and applications (OOPSLA 2012)},
 year = {2012},
 isbn = {978-1-4503-1561-6},
 location = {Tucson, Arizona, USA},
 pages = {639--654},
 numpages = {16},
 url = {http://doi.acm.org/10.1145/2384616.2384663},
 doi = {10.1145/2384616.2384663},
 acmid = {2384663},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {crowdsourcing, programming languages, quality control},
}

@inproceedings{Liu:2011:DED:2043556.2043587,
 author = {Liu, Tongping and Curtsinger, Charlie and Berger, Emery D.},
 title = {{\sc Dthreads}: efficient deterministic multithreading},
 booktitle = {Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles},
 series = {SOSP '11},
 year = {2011},
 isbn = {978-1-4503-0977-6},
 location = {Cascais, Portugal},
 pages = {327--336},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2043556.2043587},
 doi = {http://doi.acm.org/10.1145/2043556.2043587},
 acmid = {2043587},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@inproceedings{Liu:2011:SPD:2048066.2048070,
 author = {Liu, Tongping and Berger, Emery D.},
 title = {{\sc Sheriff}: precise detection and automatic mitigation of false sharing},
 booktitle = {Proceedings of the 2011 ACM international conference on Object oriented programming systems languages and applications},
 series = {OOPSLA '11},
 year = {2011},
 isbn = {978-1-4503-0940-0},
 location = {Portland, Oregon, USA},
 pages = {3--18},
 numpages = {16},
 url = {http://doi.acm.org/10.1145/2048066.2048070},
 doi = {http://doi.acm.org/10.1145/2048066.2048070},
 acmid = {2048070},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {false sharing, multi-threaded},
}

@inproceedings{Novark:2010:DSH:1866307.1866371,
 author = {Novark, Gene and Berger, Emery D.},
 title = {{DieHarder}: securing the heap},
 booktitle = {Proceedings of the 17th ACM conference on Computer and communications security},
 series = {CCS '10},
 year = {2010},
 isbn = {978-1-4503-0245-6},
 location = {Chicago, Illinois, USA},
 pages = {573--584},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1866307.1866371},
 doi = {http://doi.acm.org/10.1145/1866307.1866371},
 acmid = {1866371},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {buffer overflow, dangling pointer, dynamic memory allocation, memory errors},
}


@INPROCEEDINGS{5161509,
title={Using Randomized Caches in Probabilistic Real-Time Systems},
author={Quinones, E. and Berger, E.D. and Bernat, G. and Cazorla, F.J.},
booktitle={21st Euromicro Conference on Real-Time Systems (ECRTS '09)},
year={2009},
month={July},
volume={},
number={},
pages={129-138},
keywords={cache storage, safety-critical softwarecache risk patterns, cache-based performance anomalies, data access patterns, hardware caches, memory layout, probabilistic worst-case execution time analysis, randomized cache replacement policies, safety critical real-time systems},
doi={10.1109/ECRTS.2009.30},
ISSN={1068-3070}, }

@inproceedings{Sorber07,
	Author = {Jacob Sorber and Alexander Kostadinov and Matthew Garber and Matthew Brennan and Mark D. Corner and Emery D. Berger},
	Booktitle = {Proceedings of The Fifth International ACM Conference on Embedded Networked Sensor Systems (SenSys '07)},
	Date-Added = {2006-12-04 20:52:54 -0500},
	Date-Modified = {2007-07-05 10:30:53 -0400},
 pages = {161--174},
 location = {Sydney, Australia},
 doi = {http://doi.acm.org/10.1145/1322263.1322279},
 publisher = {ACM},
 address = {New York, NY, USA},
	Month = {November},
	Title = {{Eon: A Language and Runtime System for Perpetual Systems}},
	Year = {2007}
}

@inproceedings{1542521,
 author = {Gene Novark and Emery D. Berger and Benjamin G. Zorn},
 title = {Efficiently and precisely locating memory leaks and bloat},
 booktitle = {Proceedings of the 2009 ACM SIGPLAN conference on Programming language design and implementation (PLDI 2009)},
 year = {2009},
 isbn = {978-1-60558-392-1},
 pages = {397--407},
 location = {Dublin, Ireland},
 doi = {http://doi.acm.org/10.1145/1542476.1542521},
 publisher = {ACM},
 address = {New York, NY, USA},
 }


@article{1409382,
 author = {Gene Novark and Emery D. Berger and Benjamin G. Zorn},
 title = {Exterminator: Automatically correcting memory errors with high probability},
 journal = {Communications of the ACM},
 volume = {51},
 number = {12},
 year = {2008},
 issn = {0001-0782},
 pages = {87--95},
 doi = {http://doi.acm.org/10.1145/1409360.1409382},
 publisher = {ACM},
 address = {New York, NY, USA},
 }



@inproceedings{DBLP:conf/osdi/YangLBKM08,
  author    = {Ting Yang and
               Tongping Liu and
               Emery D. Berger and
               Scott F. Kaplan and
               J. Eliot B. Moss},
  title     = {Redline: First Class Support for Interactivity in Commodity
               Operating Systems},
  booktitle = {Proceedings of the 8th USENIX Symposium on Operating Systems Design and Implementation
               (OSDI 2008)},
  month     = dec,
  day       = {8--10},
  location  = {San Diego, California, USA},
  year      = {2008},
  pages     = {73-86},
  ee        = {http://www.usenix.org/events/osdi08/tech/full_papers/yang/yang.pdf},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  editor    = {Richard Draves and
               Robbert van Renesse},
  publisher = {USENIX Association},
  isbn      = {978-1-931971-65-2},
}

@inproceedings{DBLP:conf/oopsla/BergerYLN09,
  author    = {Emery D. Berger and
               Ting Yang and
               Tongping Liu and
               Gene Novark},
  title     = {Grace: safe multithreaded programming for {C/C++}},
  booktitle = {Proceedings of the 24th Annual ACM SIGPLAN Conference on
               Object-Oriented Programming, Systems, Languages, and Applications
               (OOPSLA 2009)},
  month     = oct,
  day       = {25--29},
  year      = 2009,
  location  = {Orlando, Florida, USA},
  pages     = {81--96},
  ee        = {http://doi.acm.org/10.1145/1640089.1640096},
  editor    = {Shail Arora and Gary T. Leavens},
  isbn      = {978-1-60558-766-0},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{1346296,
 author = {Vitaliy B. Lvin and Gene Novark and Emery D. Berger and Benjamin G. Zorn},
 title = {Archipelago: trading address space for reliability and security},
 booktitle = {ASPLOS XIII: Proceedings of the 13th international conference on Architectural support for programming languages and operating systems},
 month = mar,
 year = 2008,
 isbn = {978-1-59593-958-6},
 pages = {115--124},
 location = {Seattle, WA, USA},
 doi = {http://doi.acm.org/10.1145/1346281.1346296},
 publisher = {ACM},
 address = {New York, NY, USA},
 }


@inproceedings{1250736,
 author = {Gene Novark and Emery D. Berger and Benjamin G. Zorn},
 title = {Exterminator: automatically correcting memory errors with high probability},
 booktitle = {Proceedings of the 2007 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI 2007)},
 year = {2007},
 isbn = {978-1-59593-633-2},
 pages = {1--11},
 location = {San Diego, California, USA},
 doi = {http://doi.acm.org/10.1145/1250734.1250736},
 publisher = {ACM Press},
 address = {New York, NY, USA},
 }


@techreport{berg07,
  author = {Emery D. Berger and Benjamin G. Zorn},
  title = {Efficient Probabilistic Memory Safety},
  month = mar,
  year = 2007,
  number = {UMCS TR-2007-17},
  institution = {Department of Computer Science, University of Massachusetts Amherst},
}


@techreport{cola06,
  title = {Custom Object Layout for Garbage-Collected Languages},
  author = {Gene Novark, Trevor D. Strohman, Emery D. Berger},
  month = jul,
  year = 2006,
  number = {UMCS TR-2006-007},
  institution = {Department of Computer Science, University of Massachusetts Amherst},
  abstract = {Modern architectures require data locality to achieve
                  performance. However, garbage-collected languages
                  like Java limit the ability of programmers to
                  influence object locality, and so impose a
                  significant performance penalty. We present custom
                  object layout, an approach that allows programmers
                  to control object layout in garbage-collected
                  languages. Custom object layout cooperates with
                  copying garbage collection. At collection time, the
                  garbage collector invokes programmer-supplied
                  methods that direct object placement. Custom object
                  layout is particularly effective at improving the
                  locality of classes with well-known traversal
                  patterns, such as dictionary data structures. We
                  show that using custom object layout can reduce
                  cache misses by 50\%-77\% and thus improves the
                  query performance of dictionary data structures by
                  20\%.}
}

@techreport{shark03,
  title = {Optimizing Shell Scripting Languages},
  author = {Emery D. Berger},
  month = sep,
  year = 2003,
  number = {UMCS TR-2003-009},
  institution = {Department of Computer Science, University of Massachusetts Amherst},
  abstract = {We present an optimizing compiler that dramatically
                  improves the performance of shell script
                  languages. Our prototype system, called Shark,
                  performs a number of domainspecific
                  optimizations. We show that, subject to some
                  constraints, we can treat file I/O in shell
                  languages like variables in regular programming
                  languages. This insight allows us to leverage
                  traditional compiler analyses to eliminate temporary
                  files, transform file-based I/O to pipes, and
                  extract coarse-grained parallelism. We show how we
                  can further improve performance by eliminating
                  process creation overhead, which can dominate the
                  runtime of shell scripts. By modifying just a few
                  lines of code, we can convert external commands like
                  grep into dynamic libraries. Shark loads these
                  libraries just once so that subsequent invocations
                  execute with the speed of function calls, and then
                  unloads them when they are no longer needed. We
                  present results with our prototype demonstrating
                  substantial speedups over the bash shell.},
}

@misc{hoard,
  author = "Emery D. Berger",
  title = "The {Hoard} Memory Allocator",
  year = {2016},
  note = "Available at \url{http://www.hoard.org}"
}

@Article{BrowneBergerDube:IJHPCA2000,
  author =       "James C. Browne and Emery D. Berger and Aditya Dube",
  title =        "Compositional Development of Performance Models in
                 {POEMS}",
  journal =      "The International Journal of High Performance
                 Computing Applications",
  volume =       "14",
  number =       "4",
  pages =        "283--291",
  month =        "Winter",
  year =         "2000",
  coden =        "IHPCFL",
  ISSN =         "1094-3420",
  bibdate =      "Tue Sep 12 12:28:02 2000",
}

@inproceedings{BergerMcKinleyBlumofeWilson:ASPLOS2000,
  author = {Emery D. Berger and Kathryn S. McKinley and Robert D. Blumofe and Paul R. Wilson},
  title = {Hoard: A Scalable Memory Allocator for Multithreaded Applications},
  month = nov,
  year = 2000,
  pages = "117--128",
  booktitle =  "Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-IX)",
  address = "Cambridge, MA",
  url = "citeseer.ist.psu.edu/berger00hoard.html"
}

@inproceedings{BergerZornMcKinley:2001,
  author = "Emery D. Berger and Benjamin G. Zorn and Kathryn S. McKinley",
  title =  "Composing High-Performance Memory Allocators",
  booktitle = "Proceedings of the 2001 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI 2001)",
  year = "2001",
  month = jun,
  day = "20--22",
  address = "Snowbird, Utah",
  abstract = {In this paper, we present a flexible and efficient
                  infrastructure for building memory allocators that
                  is based on C++ templates and inheritance. This
                  novel approach allows programmers to build custom
                  and general-purpose allocators as "heap layers" that
                  can be composed without incurring any runtime
                  overhead or additional programming cost. We show
                  that this infrastructure simplifies allocator
                  construction and results in allocators that either
                  match or improve the performance of heavily-tuned
                  allocators written in C, including the Kingsley
                  allocator and the GNU obstack library. We further
                  show this infrastructure can be used to rapidly
                  build a general-purpose allocator that has
                  performance comparable to Lea's allocator, the best
                  uniprocesor allocator of which we are aware. We thus
                  demonstrate a clean, easy-to-use allocator interface
                  that seamlessly combines the power and efficiency of
                  any number of general and custom allocators within a
                  single application.},
}


@inproceedings{582421,
 author = {Emery D. Berger and Benjamin G. Zorn and Kathryn S. McKinley},
 title = {Reconsidering custom memory allocation},
 booktitle = {OOPSLA '02: Proceedings of the 17th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications},
 year = {2002},
 isbn = {1-58113-471-1},
 pages = {1--12},
 location = {Seattle, Washington, USA},
 doi = {http://doi.acm.org/10.1145/582419.582421},
 publisher = {ACM Press},
 address = {New York, NY, USA},
 }

@inproceedings{BZM2002,
  author = "Emery D. Berger and Benjamin G. Zorn and Kathryn S. McKinley",
  title = "Reconsidering Custom Memory Allocation",
  booktitle = "Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications (OOPSLA) 2002",
  address = "Seattle, Washington",
  month = Nov,
  year = "2002",
  url = "citeseer.ist.psu.edu/berger01reconsidering.html"
}

@inproceedings{379232,
 author = {Emery D. Berger and Kathryn S. McKinley and Robert D. Blumofe and Paul R. Wilson},
 title = {Hoard: a scalable memory allocator for multithreaded applications},
 booktitle = {ASPLOS-IX: Proceedings of the ninth international conference on Architectural support for programming languages and operating systems},
 year = {2000},
 isbn = {1-58113-317-0},
 pages = {117--128},
 location = {Cambridge, Massachusetts, United States},
 doi = {http://doi.acm.org/10.1145/378993.379232},
 publisher = {ACM Press},
 address = {New York, NY, USA},
 }

@inproceedings{378821,
 author = {Emery D. Berger and Benjamin G. Zorn and Kathryn S. McKinley},
 title = {Composing high-performance memory allocators},
 booktitle = {Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation (PLDI 2001)},
 year = {2001},
 isbn = {1-58113-414-2},
 pages = {114--124},
 location = {Snowbird, Utah, United States},
 doi = {http://doi.acm.org/10.1145/378795.378821},
 publisher = {ACM Press},
 address = {New York, NY, USA},
  abstract = {In this paper, we present a flexible and efficient
                  infrastructure for building memory allocators that
                  is based on C++ templates and inheritance. This
                  novel approach allows programmers to build custom
                  and general-purpose allocators as "heap layers" that
                  can be composed without incurring any runtime
                  overhead or additional programming cost. We show
                  that this infrastructure simplifies allocator
                  construction and results in allocators that either
                  match or improve the performance of heavily-tuned
                  allocators written in C, including the Kingsley
                  allocator and the GNU obstack library. We further
                  show this infrastructure can be used to rapidly
                  build a general-purpose allocator that has
                  performance comparable to Lea's allocator, the best
                  uniprocesor allocator of which we are aware. We thus
                  demonstrate a clean, easy-to-use allocator interface
                  that seamlessly combines the power and efficiency of
                  any number of general and custom allocators within a
                  single application.},
 }

@inproceedings{1094836,
 author = {Matthew Hertz and Emery D. Berger},
 title = {Quantifying the performance of garbage collection vs. explicit memory management},
 booktitle = {OOPSLA '05: Proceedings of the 20th annual ACM SIGPLAN conference on Object oriented programming, systems, languages, and applications},
 year = {2005},
 isbn = {1-59593-031-0},
 pages = {313--326},
 location = {San Diego, CA, USA},
 doi = {http://doi.acm.org/10.1145/1094811.1094836},
 publisher = {ACM Press},
 address = {New York, NY, USA},
 }

@inproceedings{1111594,
 author = {Yi Feng and Emery D. Berger},
 title = {A locality-improving dynamic memory allocator},
 booktitle = {MSP '05: Proceedings of the 2005 workshop on Memory system performance},
 year = {2005},
 isbn = {1-59593-147-3},
 pages = {68--77},
 location = {Chicago, Illinois},
 doi = {http://doi.acm.org/10.1145/1111583.1111594},
 publisher = {ACM Press},
 address = {New York, NY, USA},
 }

@inproceedings{DBLP:conf/oopsla/SachindranMB04,
  author    = {Narendran Sachindran and
               J. Eliot B. Moss and
               Emery D. Berger},
  title     = {MC$^{\mbox{2}}$: high-performance garbage collection for memory-constrained
               environments},
  booktitle     = {Proceedings of the 19th Annual ACM SIGPLAN Conference on
               Object-Oriented Programming, Systems, Languages, and Applications,
               OOPSLA 2004, October 24-28, 2004, Vancouver, BC, Canada},
  booktitle = {OOPSLA},
  month     = oct,
  day       = {24--28},
  year      = {2004},
  pages     = {81-98},
  location  = {Vancouver, BC, Canada},
  ee        = {http://doi.acm.org/10.1145/1028976.1028984},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  editor    = {John M. Vlissides and Douglas C. Schmidt},
  isbn      = {1-58113-831-8},
}


@inproceedings{1029881,
 author = {Ting Yang and Matthew Hertz and Emery D. Berger and Scott F. Kaplan and J. Eliot B. Moss},
 title = {Automatic heap sizing: taking real memory into account},
 booktitle = {ISMM '04: Proceedings of the 4th international symposium on Memory management},
 year = {2004},
 isbn = {1-58113-945-4},
 pages = {61--72},
 location = {Vancouver, BC, Canada},
 doi = {http://doi.acm.org/10.1145/1029873.1029881},
 publisher = {ACM Press},
 address = {New York, NY, USA},
 }



@inproceedings{savmm-poster,
  author = "Emery D. Berger and Scott F. Kaplan and Bhuvan Urgaonkar and Pritesh Sharma and Abhishek Chandra and Prashant Shenoy",
  title = "Scheduler-aware virtual memory management",
  month = oct,
  year = 2003,
  booktitle = {The 19th ACM Symposium on Operating Systems Principles (SOSP-19), poster session}
}

@inproceedings{yang04,
  author = "Ting Yang and Matthew Hertz and Emery D. Berger and Scott F. Kaplan and J. Eliot B. Moss",
  title = "Automatic Heap Sizing: Taking Real Memory into Account",
  booktitle = "Proceedings of the 2004 {ACM} {SIGPLAN} International Symposium on Memory Management (ISMM)",
  month = nov,
 year = {2004},
 isbn = {1-58113-945-4},
 pages = {61--72},
 location = {Vancouver, BC, Canada},
 doi = {http://doi.acm.org/10.1145/1029873.1029881},
 publisher = {ACM Press},
}


@inproceedings{1028984,
 author = {Narendran Sachindran and J. Eliot B. Moss and Emery D. Berger},
 title = {{MC}$^{2}$: High-performance garbage collection for memory-constrained environments},
 booktitle = {Proceedings of the 19th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA) 2004},
 year = {2004},
 isbn = {1-58113-831-9},
 pages = {81--98},
 location = {Vancouver, BC, Canada},
 doi = {http://doi.acm.org/10.1145/1028976.1028984},
 publisher = {ACM Press},
}

@inproceedings{hert05,
  title = "Garbage Collection without Paging",
  author = "Matthew Hertz and Yi Feng and Emery D. Berger",
  booktitle = "Proceedings of the 2005 {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation (PLDI 2005)",
  month = jun,
  year = 2005,
  pages = "143--153",
  location = {Chicago, IL},
  publisher = {ACM},
}

@inproceedings{feng05,
  author =       "Yi Feng and Emery D. Berger",
  title =        "A Locality-Improving Dynamic Memory Allocator",
  booktitle =    "Proceedings of the {ACM SIGPLAN} 2005 Workshop on Memory System Performance (MSP)",
  year = 	 2005,
  month =        jun,
  address =      "Chicago, IL",
}

@inproceedings{hert05a,
  booktitle =	"Proceedings of the 20th annual {ACM} {SIGPLAN} Conference on Object-Oriented Programming Systems, Languages, and Applications (OOPSLA 2005)",
  year = 	 2005,
  address =	"San Diego, CA",
  month = 	 Oct,
  title =  {Quantifying the Performance of Garbage Collection vs. Explicit Memory Management},
  author = {Matthew Hertz and Emery D. Berger}
}

@inproceedings{flux06usenix,
 author = {Brendan Burns and Kevin Grimaldi and Alexander Kostadinov and Emery D. Berger and Mark D. Corner},
 title = {Flux: A Language for Programming High-Performance Servers},
 booktitle = {Proceedings of the 2006 USENIX Annual Technical Conference},
 month = jun,
 year = {2006},
 location = {Boston, Massachusetts},
 pages = {129--142},
 abstract = {Programming high-performance server applications is
                  challenging: it is both complicated and error-prone
                  to write the concurrent code required to deliver
                  high performance and scalability. Server performance
                  bottlenecks are difficult to identify and
                  correct. Finally, it is difficult to predict server
                  performance prior to deployment.  This paper
                  presents Flux, a language that dramatically
                  simplifies the construction of scalable
                  high-performance server applications. Flux lets
                  programmers compose off-the-shelf, sequential C or
                  C++ functions into concurrent servers. Flux programs
                  are type-checked and guaranteed to be
                  deadlock-free. We have built a number of servers in
                  Flux, including a web server with PHP support, an
                  image-rendering server, a BitTorrent peer, and a
                  game server. These Flux servers match or exceed the
                  performance of their counterparts written entirely
                  in C. By tracking hot paths through a running
                  server, Flux simplifies the identification of
                  performance bottlenecks. The Flux compiler also
                  automatically generates discrete event simulators
                  that accurately predict actual server performance
                  under load and with different hardware resources.}
}

@inproceedings{TFS2007,
	Address = {San Jose, CA},
	Author = {James Cipar and Mark D. Corner and Emery D. Berger},
	Booktitle = {Proceedings of USENIX Conference on File and Storage Technologies (FAST)},
	Date-Added = {2007-07-30 10:03:23 -0400},
	Date-Modified = {2007-07-30 10:03:23 -0400},
	Keywords = {Operating Systems;Award Paper},
	Month = {February},
	Pages = {215-229},
	Slides_Url = {http://prisms.cs.umass.edu/mcorner/papers/TFS.ppt},
	Techreport_Url = {http://prisms.cs.umass.edu/mcorner/papers/tfs-tr-06-05.pdf},
	Title = {{TFS: A Transparent File System for Contributory Storage (Best Paper Award)}},
	Url = {http://prisms.cs.umass.edu/mcorner/papers/fast_2007_tfs.pdf},
 location = {San Jose, CA},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA},
	Year = {2007}}

@article{1288787,
 author = {James Cipar and Mark D. Corner and Emery D. Berger},
 title = {Contributing storage using the transparent file system},
 journal = {Trans. Storage},
 volume = {3},
 number = {3},
 year = {2007},
 issn = {1553-3077},
 pages = {12},
 doi = {http://doi.acm.org/10.1145/1288783.1288787},
 publisher = {ACM},
 address = {New York, NY, USA},
 }

@inproceedings{transparent2006usenix,
  author = {James Cipar and Mark D. Corner and Emery D. Berger},
  title = {Transparent Contribution of Memory},
  booktitle = {Proceedings of the 2006 USENIX Annual Technical Conference},
  month = jun,
  year = {2006},
  location = {Boston, Massachusetts},
  pages = {109--114},
  abstract = {A multitude of research and commercial projects have
                  proposed contributory systems that utilize wasted
                  CPU cycles, idle memory and free disk space found on
                  end-user machines. These applications include
                  distributed computation such as signal processing
                  and protein folding, peer-to-peer backup, and
                  large-scale distributed storage. While users are
                  generally willing to give up unused CPU cycles, the
                  use of memory by contributory applications deters
                  participation in such systems. Contributory
                  applications pollute the machine's memory, forcing
                  user pages to be evicted to disk. This paging can
                  disrupt user activity for seconds or even minutes.
                  In this paper, we describe the design and
                  implementation of an operating system mechanism to
                  support transparent contribution of memory. A
                  transparent memory manager (TMM) controls memory
                  usage by contributory applications, ensuring that
                  users will not notice an increase in the miss rate
                  of their applications. TMM is able to protect user
                  pages such that page miss overhead is limited to
                  1.7\%, while donating hundreds of megabytes of
                  memory.}
}

@inproceedings{1134000,
 author = {Emery D. Berger and Benjamin G. Zorn},
 title = {{DieHard}: Probabilistic Memory Safety for Unsafe Languages},
 booktitle = {Proceedings of the 2006 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI 2006)},
 year = {2006},
 isbn = {1-59593-320-4},
 pages = {158--168},
 location = {Ottawa, Ontario, Canada},
 doi = {http://doi.acm.org/10.1145/1133981.1134000},
 publisher = {ACM Press},
 address = {New York, NY, USA},
 }

@inproceedings{1267316,
 author = {Ting Yang and Emery D. Berger and Scott F. Kaplan and  J. Eliot B. Moss},
 title = {{CRAMM}: virtual memory support for garbage-collected applications},
 booktitle = {Proceedings of the 7th USENIX Symposium on Operating Systems Design and Implementation (OSDI '06)},
 year = {2006},
 pages = {103--116},
 location = {Seattle, WA},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA},
 }

@inproceedings{DBLP:conf/osdi/YangBKM06,
  author    = {Ting Yang and
               Emery D. Berger and
               Scott F. Kaplan and
               J. Eliot B. Moss},
  title     = {CRAMM: Virtual Memory Support for Garbage-Collected Applications},
  booktitle     = {Proceedings of the 7th Symposium on Operating Systems Design and Implementation
               (OSDI '06)},
  month     = nov,
  day       = {6--8},
  year      = {2006},
  pages     = {103-116},
  location  = {Seattle, WA, USA},
  ee        = {http://www.usenix.org/events/osdi06/tech/yang_ting.html},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  publisher = {USENIX Association},
}


%%%%%%%%%%%%%%
%%%%%%%%%%%%%%

@techreport{berg06,
  author = {Emery D. Berger},
  title = {{H}eap{S}hield: Library-Based Heap Overflow Protection for Free},
  month = may,
  year = 2006,
  number = {UMCS TR-2006-28},
  institution = {Department of Computer Science, University of Massachusetts Amherst},
}
